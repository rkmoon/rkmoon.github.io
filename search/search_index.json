{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Football \u00b6 Lightweight technical & content documentation for the Unreal Engine 5.6 prototype. Purpose \u00b6 Capture just enough shared knowledge to move fast without re\u2011explaining core systems. Start Here \u00b6 Quick setup: see Quick Start Folder + naming: see Project Structure Ability framework: see Ability System Core Systems (Snapshot) \u00b6 Area Status Notes Ability System Early Sprint / Throw / Tackle / Block implemented Movement Early Custom movement component present Input Early Enhanced Input contexts wired UI HUD Prototype WBP_QBHUD placeholder Maps \u00b6 Current: Prototype field, third-person test, lobby staging. Immediate Priorities \u00b6 Tuning stamina + cost effects Add catch / possession logic Basic scoreboard UI Contribute \u00b6 Standards are intentionally minimal\u2014expand as contributors join. See Standards . Changelog Snapshot \u00b6 See full Changelog . FAQ \u00b6 Common answers: FAQ .","title":"Home"},{"location":"#project-football","text":"Lightweight technical & content documentation for the Unreal Engine 5.6 prototype.","title":"Project Football"},{"location":"#purpose","text":"Capture just enough shared knowledge to move fast without re\u2011explaining core systems.","title":"Purpose"},{"location":"#start-here","text":"Quick setup: see Quick Start Folder + naming: see Project Structure Ability framework: see Ability System","title":"Start Here"},{"location":"#core-systems-snapshot","text":"Area Status Notes Ability System Early Sprint / Throw / Tackle / Block implemented Movement Early Custom movement component present Input Early Enhanced Input contexts wired UI HUD Prototype WBP_QBHUD placeholder","title":"Core Systems (Snapshot)"},{"location":"#maps","text":"Current: Prototype field, third-person test, lobby staging.","title":"Maps"},{"location":"#immediate-priorities","text":"Tuning stamina + cost effects Add catch / possession logic Basic scoreboard UI","title":"Immediate Priorities"},{"location":"#contribute","text":"Standards are intentionally minimal\u2014expand as contributors join. See Standards .","title":"Contribute"},{"location":"#changelog-snapshot","text":"See full Changelog .","title":"Changelog Snapshot"},{"location":"#faq","text":"Common answers: FAQ .","title":"FAQ"},{"location":"changelog/","text":"Changelog \u00b6 Follow Keep a Changelog style (lightweight) [Unreleased] \u00b6 Initial documentation scaffold Ability + effect listing 0.1.0 - 2025-09-23 \u00b6 Project documentation initialized","title":"Changelog"},{"location":"changelog/#changelog","text":"Follow Keep a Changelog style (lightweight)","title":"Changelog"},{"location":"changelog/#unreleased","text":"Initial documentation scaffold Ability + effect listing","title":"[Unreleased]"},{"location":"changelog/#010-2025-09-23","text":"Project documentation initialized","title":"0.1.0 - 2025-09-23"},{"location":"faq/","text":"FAQ \u00b6 Why use GAS so early? \u00b6 Provides scalable ability + effect structure; prevents refactor later. Where do I add a new ability? \u00b6 Create GA_NewAbility in AbilitySystem/Abilities from Gameplay->Gameplay Ability Blueprint Grant ability to character How do I tweak stamina costs? \u00b6 Edit DA_AbilityCosts and relevant cost Gameplay Effects.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#why-use-gas-so-early","text":"Provides scalable ability + effect structure; prevents refactor later.","title":"Why use GAS so early?"},{"location":"faq/#where-do-i-add-a-new-ability","text":"Create GA_NewAbility in AbilitySystem/Abilities from Gameplay->Gameplay Ability Blueprint Grant ability to character","title":"Where do I add a new ability?"},{"location":"faq/#how-do-i-tweak-stamina-costs","text":"Edit DA_AbilityCosts and relevant cost Gameplay Effects.","title":"How do I tweak stamina costs?"},{"location":"project-structure/","text":"Project Structure \u00b6 Overview of major runtime and content folders mapped to in-engine assets. Content Folders \u00b6 AbilitySystem/ Abilities/ (GA_*) Effects/ (GE_*) Attributes/ Tags/ (DT_GameplayTags) Actors/ Football/ (BP_Football, SM_Football) Art/ Blueprints/ FunctionLibraries/ (BPL_*) Interfaces/ (BPI_*) Game/ Character/ (BP_FootballCharacter, BP_FootballPlayerController) GameModes/ (BP_FootballGameModeBase) Input/ Actions/ (IA_*) Maps/ (Prototype_Football_Field.umap) Materials/ (M_Football) ThirdPerson/ (Lvl_Lobby, Lvl_ThirdPerson) UI/ (WBP_QBHUD) Source Layout \u00b6 Source/Project_Football/ Public/ AbilitySystem/ Character/ Private/ AbilitySystem/ Character/ Naming Conventions \u00b6 Type Prefix Example Blueprint Actor BP_ BP_Football Gameplay Ability GA_ GA_ThrowBall Gameplay Effect GE_ GE_ApplyHoldBall Data Asset DA_ DA_AbilityCosts Attribute Set (Class) PFAttributeSet Widget Blueprint WBP_ WBP_QBHUD Interface BPI_ BPI_Player Function Library BPL_ BPL_GameplayEffectFunctions Material M_ M_Football Static Mesh SM_ SM_Football Texture T_ T_Crosshair07 Gameplay Ability System (GAS) Touchpoints \u00b6 Abilities: GA_* Effects: GE_* (grouped by domain: Ball, Character, Costs) Tags: DT_GameplayTags Attribute Set: PFAttributeSet Cost Data: DA_AbilityCosts Maps \u00b6 Prototype / Core Field: Prototype_Football_Field Third-person sandbox: Lvl_ThirdPerson Lobby / staging: Lvl_Lobby UI \u00b6 HUD: WBP_QBHUD","title":"Project Structure"},{"location":"project-structure/#project-structure","text":"Overview of major runtime and content folders mapped to in-engine assets.","title":"Project Structure"},{"location":"project-structure/#content-folders","text":"AbilitySystem/ Abilities/ (GA_*) Effects/ (GE_*) Attributes/ Tags/ (DT_GameplayTags) Actors/ Football/ (BP_Football, SM_Football) Art/ Blueprints/ FunctionLibraries/ (BPL_*) Interfaces/ (BPI_*) Game/ Character/ (BP_FootballCharacter, BP_FootballPlayerController) GameModes/ (BP_FootballGameModeBase) Input/ Actions/ (IA_*) Maps/ (Prototype_Football_Field.umap) Materials/ (M_Football) ThirdPerson/ (Lvl_Lobby, Lvl_ThirdPerson) UI/ (WBP_QBHUD)","title":"Content Folders"},{"location":"project-structure/#source-layout","text":"Source/Project_Football/ Public/ AbilitySystem/ Character/ Private/ AbilitySystem/ Character/","title":"Source Layout"},{"location":"project-structure/#naming-conventions","text":"Type Prefix Example Blueprint Actor BP_ BP_Football Gameplay Ability GA_ GA_ThrowBall Gameplay Effect GE_ GE_ApplyHoldBall Data Asset DA_ DA_AbilityCosts Attribute Set (Class) PFAttributeSet Widget Blueprint WBP_ WBP_QBHUD Interface BPI_ BPI_Player Function Library BPL_ BPL_GameplayEffectFunctions Material M_ M_Football Static Mesh SM_ SM_Football Texture T_ T_Crosshair07","title":"Naming Conventions"},{"location":"project-structure/#gameplay-ability-system-gas-touchpoints","text":"Abilities: GA_* Effects: GE_* (grouped by domain: Ball, Character, Costs) Tags: DT_GameplayTags Attribute Set: PFAttributeSet Cost Data: DA_AbilityCosts","title":"Gameplay Ability System (GAS) Touchpoints"},{"location":"project-structure/#maps","text":"Prototype / Core Field: Prototype_Football_Field Third-person sandbox: Lvl_ThirdPerson Lobby / staging: Lvl_Lobby","title":"Maps"},{"location":"project-structure/#ui","text":"HUD: WBP_QBHUD","title":"UI"},{"location":"quick-start/","text":"Quick Start \u00b6 Prerequisites \u00b6 Unreal Engine 5.6 Visual Studio 2022 (Desktop + Game development workload) .NET SDK / Windows SDK Next \u00b6 See Project Structure .","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"quick-start/#prerequisites","text":"Unreal Engine 5.6 Visual Studio 2022 (Desktop + Game development workload) .NET SDK / Windows SDK","title":"Prerequisites"},{"location":"quick-start/#next","text":"See Project Structure .","title":"Next"},{"location":"standards/","text":"Standards (Light) \u00b6 Minimal initial standards to keep project consistent. C++ \u00b6 Use PF prefix for new engine-facing classes. Keep includes minimal; forward declare where possible. One class per file. Blueprints \u00b6 Prefix: BP_ , GA_ , GE_ , DA_ , BPI_ , BPL_ , WBP_ . Keep event graph small; move logic to functions. Use categories for exposed variables. Folders \u00b6 Use subfolders inside AbilitySystem for clarity. Gameplay Tags \u00b6 Add only if used or scheduled soon. Remove dead tags quickly.","title":"Standards"},{"location":"standards/#standards-light","text":"Minimal initial standards to keep project consistent.","title":"Standards (Light)"},{"location":"standards/#c","text":"Use PF prefix for new engine-facing classes. Keep includes minimal; forward declare where possible. One class per file.","title":"C++"},{"location":"standards/#blueprints","text":"Prefix: BP_ , GA_ , GE_ , DA_ , BPI_ , BPL_ , WBP_ . Keep event graph small; move logic to functions. Use categories for exposed variables.","title":"Blueprints"},{"location":"standards/#folders","text":"Use subfolders inside AbilitySystem for clarity.","title":"Folders"},{"location":"standards/#gameplay-tags","text":"Add only if used or scheduled soon. Remove dead tags quickly.","title":"Gameplay Tags"},{"location":"assets/art-materials/","text":"Art & Materials \u00b6 Assets \u00b6 Asset Type Notes SM_Football Static Mesh Used by BP_Football M_Football Material Base football material T_Crosshair07 Texture HUD crosshair MI_ThirdPersonColWay Material Instance ThirdPerson map variant Guidelines \u00b6 Keep simple placeholder materials until style guide defined. Prefix dynamic instances with MI_ . Consolidate common master materials later. Future \u00b6 Stadium environment set Player uniforms","title":"Art & Materials"},{"location":"assets/art-materials/#art-materials","text":"","title":"Art &amp; Materials"},{"location":"assets/art-materials/#assets","text":"Asset Type Notes SM_Football Static Mesh Used by BP_Football M_Football Material Base football material T_Crosshair07 Texture HUD crosshair MI_ThirdPersonColWay Material Instance ThirdPerson map variant","title":"Assets"},{"location":"assets/art-materials/#guidelines","text":"Keep simple placeholder materials until style guide defined. Prefix dynamic instances with MI_ . Consolidate common master materials later.","title":"Guidelines"},{"location":"assets/art-materials/#future","text":"Stadium environment set Player uniforms","title":"Future"},{"location":"assets/maps/","text":"Maps \u00b6 Current Maps \u00b6 Map Purpose Prototype_Football_Field Core gameplay prototyping Lvl_ThirdPerson General sandbox / movement tests Lvl_Lobby Staging / future matchmaking lobby Guidelines \u00b6 Keep experimental maps prefixed Dev_ or in a /_Scratch folder (future). Document required world settings if non-default. TODO \u00b6 Lighting / time-of-day notes","title":"Maps"},{"location":"assets/maps/#maps","text":"","title":"Maps"},{"location":"assets/maps/#current-maps","text":"Map Purpose Prototype_Football_Field Core gameplay prototyping Lvl_ThirdPerson General sandbox / movement tests Lvl_Lobby Staging / future matchmaking lobby","title":"Current Maps"},{"location":"assets/maps/#guidelines","text":"Keep experimental maps prefixed Dev_ or in a /_Scratch folder (future). Document required world settings if non-default.","title":"Guidelines"},{"location":"assets/maps/#todo","text":"Lighting / time-of-day notes","title":"TODO"},{"location":"assets/ui/","text":"UI / HUD \u00b6 Widget(s) \u00b6 Widget Purpose WBP_QBHUD Core in-game HUD (scores / stamina / possession) Planned Elements \u00b6 Ball possession indicator Stamina bar Ability cooldown indicators Guidelines \u00b6 Keep logic in underlying data / ability system; UI observes state. Use gameplay tags to drive icon states where possible. Future \u00b6 Touch controls overlay (reuse assets under Input/Touch/ )","title":"UI / HUD"},{"location":"assets/ui/#ui-hud","text":"","title":"UI / HUD"},{"location":"assets/ui/#widgets","text":"Widget Purpose WBP_QBHUD Core in-game HUD (scores / stamina / possession)","title":"Widget(s)"},{"location":"assets/ui/#planned-elements","text":"Ball possession indicator Stamina bar Ability cooldown indicators","title":"Planned Elements"},{"location":"assets/ui/#guidelines","text":"Keep logic in underlying data / ability system; UI observes state. Use gameplay tags to drive icon states where possible.","title":"Guidelines"},{"location":"assets/ui/#future","text":"Touch controls overlay (reuse assets under Input/Touch/ )","title":"Future"},{"location":"code/class-overview/","text":"Class Overview \u00b6 Key C++ classes and responsibilities. Class Responsibility Notes PFGameplayAbilityBase Common ability helpers Derive all abilities PFAttributeSet Attribute definitions (e.g., Stamina) Expand later PFAbilityCostDataAsset Data for ability costs Possibly merge into table PFCharacterMovementComponent Custom movement logic Sprint, tackle reactions Extension Points \u00b6 Add a PlayerState subclass for replicated stats. Create a custom GameState for match timing. TODO \u00b6 Document initialization order Add diagram once additional systems added","title":"Class Overview"},{"location":"code/class-overview/#class-overview","text":"Key C++ classes and responsibilities. Class Responsibility Notes PFGameplayAbilityBase Common ability helpers Derive all abilities PFAttributeSet Attribute definitions (e.g., Stamina) Expand later PFAbilityCostDataAsset Data for ability costs Possibly merge into table PFCharacterMovementComponent Custom movement logic Sprint, tackle reactions","title":"Class Overview"},{"location":"code/class-overview/#extension-points","text":"Add a PlayerState subclass for replicated stats. Create a custom GameState for match timing.","title":"Extension Points"},{"location":"code/class-overview/#todo","text":"Document initialization order Add diagram once additional systems added","title":"TODO"},{"location":"code/modules/","text":"Code Modules \u00b6 Single primary module currently: Project_Football . Build File \u00b6 Project_Football.Build.cs - Add dependencies here (GameplayAbilities, EnhancedInput, etc.). Potential Future Modules \u00b6 Module Purpose PFGameplay Core gameplay layer separation PFUI UI specific logic PFNetworking Session / replication logic Guidelines \u00b6 Keep module count low until clear boundaries emerge. Avoid circular dependencies (enforce direction).","title":"Modules"},{"location":"code/modules/#code-modules","text":"Single primary module currently: Project_Football .","title":"Code Modules"},{"location":"code/modules/#build-file","text":"Project_Football.Build.cs - Add dependencies here (GameplayAbilities, EnhancedInput, etc.).","title":"Build File"},{"location":"code/modules/#potential-future-modules","text":"Module Purpose PFGameplay Core gameplay layer separation PFUI UI specific logic PFNetworking Session / replication logic","title":"Potential Future Modules"},{"location":"code/modules/#guidelines","text":"Keep module count low until clear boundaries emerge. Avoid circular dependencies (enforce direction).","title":"Guidelines"},{"location":"gameplay/abilities/","text":"Abilities \u00b6 List + purpose of each GA_ asset. Ability Purpose Key Effects Costs Notes GA_Sprint Temporary speed increase (Add speed tag / effect) Stamina drain (periodic) Cancel on stop input GA_Jump Standard jump action None or impulse None Could gate if low stamina GA_Tackle Apply tackle state / impact GE_ApplyTackled Instant stamina cost Stops ball holder GA_Block Defensive posture (Future) Periodic stamina Could reduce incoming effects GA_ThrowBall Launch football GE_ApplyJustThrewBall , remove hold Stamina + maybe cooldown Spawns / detaches ball Data Source \u00b6 Costs: DA_AbilityCosts (tunable table or data asset). Attribute references (e.g., Stamina, SprintSpeedMultiplier) defined in Attributes . Ability Guidelines \u00b6 Use tags to: gate activation, mark transient states, filter effects. Prefer effects for attribute changes instead of manual modifications. Future Additions \u00b6 Pass vs Long Throw specialization Interception / Catch ability Fake / Dodge move","title":"Abilities"},{"location":"gameplay/abilities/#abilities","text":"List + purpose of each GA_ asset. Ability Purpose Key Effects Costs Notes GA_Sprint Temporary speed increase (Add speed tag / effect) Stamina drain (periodic) Cancel on stop input GA_Jump Standard jump action None or impulse None Could gate if low stamina GA_Tackle Apply tackle state / impact GE_ApplyTackled Instant stamina cost Stops ball holder GA_Block Defensive posture (Future) Periodic stamina Could reduce incoming effects GA_ThrowBall Launch football GE_ApplyJustThrewBall , remove hold Stamina + maybe cooldown Spawns / detaches ball","title":"Abilities"},{"location":"gameplay/abilities/#data-source","text":"Costs: DA_AbilityCosts (tunable table or data asset). Attribute references (e.g., Stamina, SprintSpeedMultiplier) defined in Attributes .","title":"Data Source"},{"location":"gameplay/abilities/#ability-guidelines","text":"Use tags to: gate activation, mark transient states, filter effects. Prefer effects for attribute changes instead of manual modifications.","title":"Ability Guidelines"},{"location":"gameplay/abilities/#future-additions","text":"Pass vs Long Throw specialization Interception / Catch ability Fake / Dodge move","title":"Future Additions"},{"location":"gameplay/ability-system/","text":"Ability System Overview \u00b6 High-level description of how the Unreal Gameplay Ability System (GAS) is used. Goals \u00b6 Modular player actions (sprint, tackle, throw) Consistent cost + cooldown handling Clear separation between abilities, effects, and attributes Components \u00b6 Concept Implementation Notes Attribute Set PFAttributeSet See Attributes for full list Ability Base PFGameplayAbilityBase Common logic / helper functions Cost Data DA_AbilityCosts Tunable cost values Abilities GA_*.uasset One Blueprint per action Gameplay Effects GE_* Apply attribute changes, states Tags DT_GameplayTags State + gating tags Flow (Typical Ability) \u00b6 Input triggers (e.g., IA_Jump ) Ability system component grants / activates GA_Jump Stamina costs determined by DA_AbilityCosts Gameplay effect(s) applied (movement speed increase) Ongoing / periodic costs if applicable Ability ends -> cleanup / tag removal Tags \u00b6 Examples: Player.Attribute.Stamina Player.Ability.ThrowBall Data.Stamina Pending Documentation \u00b6 Activation prediction (if added) Cooldown stacking rules See also: Attributes , Abilities , Gameplay Effects , Gameplay Tags .","title":"Ability System Overview"},{"location":"gameplay/ability-system/#ability-system-overview","text":"High-level description of how the Unreal Gameplay Ability System (GAS) is used.","title":"Ability System Overview"},{"location":"gameplay/ability-system/#goals","text":"Modular player actions (sprint, tackle, throw) Consistent cost + cooldown handling Clear separation between abilities, effects, and attributes","title":"Goals"},{"location":"gameplay/ability-system/#components","text":"Concept Implementation Notes Attribute Set PFAttributeSet See Attributes for full list Ability Base PFGameplayAbilityBase Common logic / helper functions Cost Data DA_AbilityCosts Tunable cost values Abilities GA_*.uasset One Blueprint per action Gameplay Effects GE_* Apply attribute changes, states Tags DT_GameplayTags State + gating tags","title":"Components"},{"location":"gameplay/ability-system/#flow-typical-ability","text":"Input triggers (e.g., IA_Jump ) Ability system component grants / activates GA_Jump Stamina costs determined by DA_AbilityCosts Gameplay effect(s) applied (movement speed increase) Ongoing / periodic costs if applicable Ability ends -> cleanup / tag removal","title":"Flow (Typical Ability)"},{"location":"gameplay/ability-system/#tags","text":"Examples: Player.Attribute.Stamina Player.Ability.ThrowBall Data.Stamina","title":"Tags"},{"location":"gameplay/ability-system/#pending-documentation","text":"Activation prediction (if added) Cooldown stacking rules See also: Attributes , Abilities , Gameplay Effects , Gameplay Tags .","title":"Pending Documentation"},{"location":"gameplay/attributes/","text":"Attributes \u00b6 Core numerical state values backed by the Unreal Gameplay Ability System (GAS) via PFAttributeSet . These replicate to clients (each has an OnRep_ handler) and are modified by Gameplay Effects ( GE_* ) or read by Abilities ( GA_* ). What Are Attributes? \u00b6 Attributes in GAS are normalized data points (health, stamina, movement modifiers, etc.) wrapped in FGameplayAttributeData . They: - Replicate efficiently (server authoritative) - Can be modified by additive, multiplicative, or override Gameplay Effects - Trigger OnAttributeChange delegates for responsive UI / logic Design Guidelines \u00b6 Keep base movement values separate from temporary multipliers (e.g., Speed vs SprintSpeedMultiplier ). Avoid adding an attribute until a system needs runtime tuning or effect-driven modification. Use Gameplay Effects for all runtime changes instead of directly setting raw values except during initialization. The Default values can be changed in AbilitySystem/Effects/Character/GE_InitValues This is set with an initial gameplay effect on the Character Attribute Table \u00b6 \"Used\" reflects current implementation in gameplay logic (update as systems come online). Attribute Category Default Used Description Primary Usage / Planned Effects Stamina Vital 100.0 Yes Current stamina resource Drained by Sprint / Tackle / Throw cost effects MaxStamina Vital 100.0 Yes Cap for Stamina Scaling reference for regen / UI percentage Speed Vital 600.0 Yes Base ground movement speed (cm/s) Modified by sprint / tackle / hold-ball logic SprintSpeedMultiplier Movement 1.4 Yes Multiplies Speed while sprinting Applied during GA_Sprint active state DashSpeedMultiplier Movement 1.8 No Burst / dash acceleration multiplier Reserved for future dash ability ChargeThrowSpeedMultiplier QB 1.0 No Scales throw charge rate / animation Future charged throw mechanic ThrowPowerMax QB 2500.0 Yes Maximum initial projectile velocity Determines football launch speed cap JumpHeight Vital 500.0 Yes Jump impulse scalar Read by jump ability / movement component FumbleChance Vital 1.0 No Base probability modifier for fumble events For future tackle vs possession resolution ThrowAccuracy QB 100.0 No Accuracy rating (spread / deviation control) Future pass dispersion + difficulty tuning Pending / Future Attributes \u00b6 Consider adding later only when needed: - CatchReliability - RecoverySpeed (stamina regen rate) - BallHandling Modification Flow Example (Sprint) \u00b6 Player activates GA_Sprint . Ability applies a periodic stamina drain Gameplay Effect (e.g., GE_PeriodicStaminaCost ). Sprint tag active \u2192 movement system multiplies base Speed * SprintSpeedMultiplier . On stamina low threshold: ability auto-ends or speed reduces. Adding a New Attribute (Checklist) \u00b6 Declare in PFAttributeSet (default value) + ATTRIBUTE_ACCESSORS macro. Add replication notifier OnRep_NewAttribute . Update UI binding / listeners (e.g., stamina bar, debug panel). Create Gameplay Effects to modify it (avoid manual writes elsewhere). Add to this table with initial Used = No. Cross References \u00b6 Abilities using attributes: Abilities Effects that modify attributes: Gameplay Effects Tags that gate attribute usage (e.g., stamina costs): Gameplay Tags Last updated: 2025-09-23","title":"Attributes"},{"location":"gameplay/attributes/#attributes","text":"Core numerical state values backed by the Unreal Gameplay Ability System (GAS) via PFAttributeSet . These replicate to clients (each has an OnRep_ handler) and are modified by Gameplay Effects ( GE_* ) or read by Abilities ( GA_* ).","title":"Attributes"},{"location":"gameplay/attributes/#what-are-attributes","text":"Attributes in GAS are normalized data points (health, stamina, movement modifiers, etc.) wrapped in FGameplayAttributeData . They: - Replicate efficiently (server authoritative) - Can be modified by additive, multiplicative, or override Gameplay Effects - Trigger OnAttributeChange delegates for responsive UI / logic","title":"What Are Attributes?"},{"location":"gameplay/attributes/#design-guidelines","text":"Keep base movement values separate from temporary multipliers (e.g., Speed vs SprintSpeedMultiplier ). Avoid adding an attribute until a system needs runtime tuning or effect-driven modification. Use Gameplay Effects for all runtime changes instead of directly setting raw values except during initialization. The Default values can be changed in AbilitySystem/Effects/Character/GE_InitValues This is set with an initial gameplay effect on the Character","title":"Design Guidelines"},{"location":"gameplay/attributes/#attribute-table","text":"\"Used\" reflects current implementation in gameplay logic (update as systems come online). Attribute Category Default Used Description Primary Usage / Planned Effects Stamina Vital 100.0 Yes Current stamina resource Drained by Sprint / Tackle / Throw cost effects MaxStamina Vital 100.0 Yes Cap for Stamina Scaling reference for regen / UI percentage Speed Vital 600.0 Yes Base ground movement speed (cm/s) Modified by sprint / tackle / hold-ball logic SprintSpeedMultiplier Movement 1.4 Yes Multiplies Speed while sprinting Applied during GA_Sprint active state DashSpeedMultiplier Movement 1.8 No Burst / dash acceleration multiplier Reserved for future dash ability ChargeThrowSpeedMultiplier QB 1.0 No Scales throw charge rate / animation Future charged throw mechanic ThrowPowerMax QB 2500.0 Yes Maximum initial projectile velocity Determines football launch speed cap JumpHeight Vital 500.0 Yes Jump impulse scalar Read by jump ability / movement component FumbleChance Vital 1.0 No Base probability modifier for fumble events For future tackle vs possession resolution ThrowAccuracy QB 100.0 No Accuracy rating (spread / deviation control) Future pass dispersion + difficulty tuning","title":"Attribute Table"},{"location":"gameplay/attributes/#pending-future-attributes","text":"Consider adding later only when needed: - CatchReliability - RecoverySpeed (stamina regen rate) - BallHandling","title":"Pending / Future Attributes"},{"location":"gameplay/attributes/#modification-flow-example-sprint","text":"Player activates GA_Sprint . Ability applies a periodic stamina drain Gameplay Effect (e.g., GE_PeriodicStaminaCost ). Sprint tag active \u2192 movement system multiplies base Speed * SprintSpeedMultiplier . On stamina low threshold: ability auto-ends or speed reduces.","title":"Modification Flow Example (Sprint)"},{"location":"gameplay/attributes/#adding-a-new-attribute-checklist","text":"Declare in PFAttributeSet (default value) + ATTRIBUTE_ACCESSORS macro. Add replication notifier OnRep_NewAttribute . Update UI binding / listeners (e.g., stamina bar, debug panel). Create Gameplay Effects to modify it (avoid manual writes elsewhere). Add to this table with initial Used = No.","title":"Adding a New Attribute (Checklist)"},{"location":"gameplay/attributes/#cross-references","text":"Abilities using attributes: Abilities Effects that modify attributes: Gameplay Effects Tags that gate attribute usage (e.g., stamina costs): Gameplay Tags Last updated: 2025-09-23","title":"Cross References"},{"location":"gameplay/character/","text":"Character \u00b6 Primary playable character & related components. Key Blueprints \u00b6 Asset Purpose BP_FootballCharacter Player pawn / ability system owner BP_FootballPlayerController Input routing / possession BP_FootballGameModeBase Match / rules orchestration BP_Football (Actor) Ball actor (possession, physics) C++ Components \u00b6 Class File Notes PFCharacterMovementComponent Character/PFCharacterMovementComponent.* Custom movement tweaks PFGameplayAbilityBase AbilitySystem/PFGameplayAbilityBase.* Shared ability helpers PFAttributeSet AbilitySystem/PFAttributeSet.* Core stats (see Attributes ) Ability System Integration \u00b6 Character owns ASC. Grant abilities on spawn. Future \u00b6 Replicated cosmetic state (team colors) Camera behavior variations (quarterback vs receiver)","title":"Character"},{"location":"gameplay/character/#character","text":"Primary playable character & related components.","title":"Character"},{"location":"gameplay/character/#key-blueprints","text":"Asset Purpose BP_FootballCharacter Player pawn / ability system owner BP_FootballPlayerController Input routing / possession BP_FootballGameModeBase Match / rules orchestration BP_Football (Actor) Ball actor (possession, physics)","title":"Key Blueprints"},{"location":"gameplay/character/#c-components","text":"Class File Notes PFCharacterMovementComponent Character/PFCharacterMovementComponent.* Custom movement tweaks PFGameplayAbilityBase AbilitySystem/PFGameplayAbilityBase.* Shared ability helpers PFAttributeSet AbilitySystem/PFAttributeSet.* Core stats (see Attributes )","title":"C++ Components"},{"location":"gameplay/character/#ability-system-integration","text":"Character owns ASC. Grant abilities on spawn.","title":"Ability System Integration"},{"location":"gameplay/character/#future","text":"Replicated cosmetic state (team colors) Camera behavior variations (quarterback vs receiver)","title":"Future"},{"location":"gameplay/effects/","text":"Gameplay Effects \u00b6 Gameplay Effects ( GE_ ) apply attribute or state changes. Organization \u00b6 Effects/ Ball/ GE_ApplyHoldBall GE_ApplyJustThrewBall GE_RemoveHoldBall Character/ GE_ApplyTackled Costs/ GE_InstantStaminaCost GE_PeriodicSaminaCost (typo? -> GE_PeriodicStaminaCost) Common Patterns \u00b6 Type Example Purpose State Apply GE_ApplyHoldBall Marks player as holder State Remove GE_RemoveHoldBall Clears holding state Status / Debuff GE_ApplyTackled Movement / ability lock Cost - Instant GE_InstantStaminaCost One-time stamina reduction Cost - Periodic GE_PeriodicStaminaCost Drains over time Naming + Conventions \u00b6 Verb first (Apply / Remove) for stateful effects. Keep cost-related effects in Costs/ subfolder. Fix typos early (consistency aids search & refactor). Stacking Rules (Fill In) \u00b6 Are tackle states mutually exclusive? Can multiple stamina drains stack? Pending \u00b6 Duration vs infinite effects doc Removal triggers (on death, end play, ability end) See also: Ability System Overview and Abilities .","title":"Gameplay Effects"},{"location":"gameplay/effects/#gameplay-effects","text":"Gameplay Effects ( GE_ ) apply attribute or state changes.","title":"Gameplay Effects"},{"location":"gameplay/effects/#organization","text":"Effects/ Ball/ GE_ApplyHoldBall GE_ApplyJustThrewBall GE_RemoveHoldBall Character/ GE_ApplyTackled Costs/ GE_InstantStaminaCost GE_PeriodicSaminaCost (typo? -> GE_PeriodicStaminaCost)","title":"Organization"},{"location":"gameplay/effects/#common-patterns","text":"Type Example Purpose State Apply GE_ApplyHoldBall Marks player as holder State Remove GE_RemoveHoldBall Clears holding state Status / Debuff GE_ApplyTackled Movement / ability lock Cost - Instant GE_InstantStaminaCost One-time stamina reduction Cost - Periodic GE_PeriodicStaminaCost Drains over time","title":"Common Patterns"},{"location":"gameplay/effects/#naming-conventions","text":"Verb first (Apply / Remove) for stateful effects. Keep cost-related effects in Costs/ subfolder. Fix typos early (consistency aids search & refactor).","title":"Naming + Conventions"},{"location":"gameplay/effects/#stacking-rules-fill-in","text":"Are tackle states mutually exclusive? Can multiple stamina drains stack?","title":"Stacking Rules (Fill In)"},{"location":"gameplay/effects/#pending","text":"Duration vs infinite effects doc Removal triggers (on death, end play, ability end) See also: Ability System Overview and Abilities .","title":"Pending"},{"location":"gameplay/gameplay-tags/","text":"Gameplay Tags \u00b6 Central tag table: DT_GameplayTags . Tags often gate or modify attributes (see Attributes ). Example Tag Categories (Propose & Refine) \u00b6 Category Example Purpose State Player.State.HoldingBall Marks current ball holder State Player.State.Tackled Restrict movement / abilities Ability Player.Ability.Block Gate activation / queries Ability Player.Ability.Throw For UI prompts / filtering Cost Data.Stamina Modify cost scaling Guidelines \u00b6 Use dot hierarchy: Domain.SubDomain.Detail . Avoid mixing concerns (no StateOrAbility.Mixed ). Add comments in the tag data asset for usage. Planned Additions \u00b6 State.Aiming Ability.Catch","title":"Gameplay Tags"},{"location":"gameplay/gameplay-tags/#gameplay-tags","text":"Central tag table: DT_GameplayTags . Tags often gate or modify attributes (see Attributes ).","title":"Gameplay Tags"},{"location":"gameplay/gameplay-tags/#example-tag-categories-propose-refine","text":"Category Example Purpose State Player.State.HoldingBall Marks current ball holder State Player.State.Tackled Restrict movement / abilities Ability Player.Ability.Block Gate activation / queries Ability Player.Ability.Throw For UI prompts / filtering Cost Data.Stamina Modify cost scaling","title":"Example Tag Categories (Propose &amp; Refine)"},{"location":"gameplay/gameplay-tags/#guidelines","text":"Use dot hierarchy: Domain.SubDomain.Detail . Avoid mixing concerns (no StateOrAbility.Mixed ). Add comments in the tag data asset for usage.","title":"Guidelines"},{"location":"gameplay/gameplay-tags/#planned-additions","text":"State.Aiming Ability.Catch","title":"Planned Additions"},{"location":"systems/input/","text":"Input System \u00b6 Enhanced Input assets + mapping contexts. Assets \u00b6 Type Asset Purpose Mapping Context IMC_Default Core gameplay bindings Mapping Context IMC_MouseLook Mouse-look specific Action IA_Move Movement vector Action IA_Look Gamepad / stick look Action IA_MouseLook Mouse delta Action IA_Sprint Sprint toggle/hold Action IA_Jump Jump Action IA_Block Defensive action Action IA_Tackle Tackle initiation Action IA_Throw Throw football Flow \u00b6 PlayerController adds IMC_Default (and situational contexts). Actions fire \u2192 bound functions / abilities. Ability system activates abilities (e.g., Sprint). Guidelines \u00b6 Keep one primary context for base gameplay. Use additional contexts (e.g., Menu, Spectator) later for clarity. Avoid logic in input events; delegate to ability / character functions.","title":"Input"},{"location":"systems/input/#input-system","text":"Enhanced Input assets + mapping contexts.","title":"Input System"},{"location":"systems/input/#assets","text":"Type Asset Purpose Mapping Context IMC_Default Core gameplay bindings Mapping Context IMC_MouseLook Mouse-look specific Action IA_Move Movement vector Action IA_Look Gamepad / stick look Action IA_MouseLook Mouse delta Action IA_Sprint Sprint toggle/hold Action IA_Jump Jump Action IA_Block Defensive action Action IA_Tackle Tackle initiation Action IA_Throw Throw football","title":"Assets"},{"location":"systems/input/#flow","text":"PlayerController adds IMC_Default (and situational contexts). Actions fire \u2192 bound functions / abilities. Ability system activates abilities (e.g., Sprint).","title":"Flow"},{"location":"systems/input/#guidelines","text":"Keep one primary context for base gameplay. Use additional contexts (e.g., Menu, Spectator) later for clarity. Avoid logic in input events; delegate to ability / character functions.","title":"Guidelines"},{"location":"systems/movement/","text":"Movement System \u00b6 Customizations around character locomotion. Component \u00b6 PFCharacterMovementComponent : modifies base speeds & sprint logic. Sprint \u00b6 Parameter Placeholder Notes Base Walk Speed TBD Default movement Sprint Multiplier TBD Applied during GA_Sprint Stamina Drain Rate TBD Tied to periodic stamina cost effect Tackle Impact (Planned) \u00b6 Stop movement using GE_ApplyTackled . Possibly root motion animation integration.","title":"Movement"},{"location":"systems/movement/#movement-system","text":"Customizations around character locomotion.","title":"Movement System"},{"location":"systems/movement/#component","text":"PFCharacterMovementComponent : modifies base speeds & sprint logic.","title":"Component"},{"location":"systems/movement/#sprint","text":"Parameter Placeholder Notes Base Walk Speed TBD Default movement Sprint Multiplier TBD Applied during GA_Sprint Stamina Drain Rate TBD Tied to periodic stamina cost effect","title":"Sprint"},{"location":"systems/movement/#tackle-impact-planned","text":"Stop movement using GE_ApplyTackled . Possibly root motion animation integration.","title":"Tackle Impact (Planned)"}]}